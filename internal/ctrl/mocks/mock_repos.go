// Code generated by MockGen. DO NOT EDIT.
// Source: ctrl.go
//
// Generated by this command:
//
//	mockgen -source=ctrl.go -destination=mocks/mock_repos.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServiceDiscoveryRepo is a mock of ServiceDiscoveryRepo interface.
type MockServiceDiscoveryRepo struct {
	ctrl     *gomock.Controller
	recorder *MockServiceDiscoveryRepoMockRecorder
}

// MockServiceDiscoveryRepoMockRecorder is the mock recorder for MockServiceDiscoveryRepo.
type MockServiceDiscoveryRepoMockRecorder struct {
	mock *MockServiceDiscoveryRepo
}

// NewMockServiceDiscoveryRepo creates a new mock instance.
func NewMockServiceDiscoveryRepo(ctrl *gomock.Controller) *MockServiceDiscoveryRepo {
	mock := &MockServiceDiscoveryRepo{ctrl: ctrl}
	mock.recorder = &MockServiceDiscoveryRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceDiscoveryRepo) EXPECT() *MockServiceDiscoveryRepoMockRecorder {
	return m.recorder
}

// Deregister mocks base method.
func (m *MockServiceDiscoveryRepo) Deregister(ctx context.Context, name, addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deregister", ctx, name, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deregister indicates an expected call of Deregister.
func (mr *MockServiceDiscoveryRepoMockRecorder) Deregister(ctx, name, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deregister", reflect.TypeOf((*MockServiceDiscoveryRepo)(nil).Deregister), ctx, name, addr)
}

// FindServiceByName mocks base method.
func (m *MockServiceDiscoveryRepo) FindServiceByName(ctx context.Context, name string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindServiceByName", ctx, name)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindServiceByName indicates an expected call of FindServiceByName.
func (mr *MockServiceDiscoveryRepoMockRecorder) FindServiceByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindServiceByName", reflect.TypeOf((*MockServiceDiscoveryRepo)(nil).FindServiceByName), ctx, name)
}

// ListAddrs mocks base method.
func (m *MockServiceDiscoveryRepo) ListAddrs(ctx context.Context, name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAddrs", ctx, name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAddrs indicates an expected call of ListAddrs.
func (mr *MockServiceDiscoveryRepoMockRecorder) ListAddrs(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAddrs", reflect.TypeOf((*MockServiceDiscoveryRepo)(nil).ListAddrs), ctx, name)
}

// ListServices mocks base method.
func (m *MockServiceDiscoveryRepo) ListServices(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices.
func (mr *MockServiceDiscoveryRepoMockRecorder) ListServices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockServiceDiscoveryRepo)(nil).ListServices), ctx)
}

// Register mocks base method.
func (m *MockServiceDiscoveryRepo) Register(ctx context.Context, name, addr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, name, addr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockServiceDiscoveryRepoMockRecorder) Register(ctx, name, addr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockServiceDiscoveryRepo)(nil).Register), ctx, name, addr)
}
