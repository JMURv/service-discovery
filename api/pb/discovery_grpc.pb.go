// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: api/pb/discovery.proto

package service_discovery

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceDiscovery_Register_FullMethodName     = "/service_discovery.ServiceDiscovery/Register"
	ServiceDiscovery_Deregister_FullMethodName   = "/service_discovery.ServiceDiscovery/Deregister"
	ServiceDiscovery_FindService_FullMethodName  = "/service_discovery.ServiceDiscovery/FindService"
	ServiceDiscovery_ListServices_FullMethodName = "/service_discovery.ServiceDiscovery/ListServices"
	ServiceDiscovery_ListAddrs_FullMethodName    = "/service_discovery.ServiceDiscovery/ListAddrs"
)

// ServiceDiscoveryClient is the client API for ServiceDiscovery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceDiscoveryClient interface {
	Register(ctx context.Context, in *NameAndAddressMsg, opts ...grpc.CallOption) (*Empty, error)
	Deregister(ctx context.Context, in *NameAndAddressMsg, opts ...grpc.CallOption) (*Empty, error)
	FindService(ctx context.Context, in *ServiceNameMsg, opts ...grpc.CallOption) (*ServiceAddressMsg, error)
	ListServices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListNamesMsg, error)
	ListAddrs(ctx context.Context, in *ServiceNameMsg, opts ...grpc.CallOption) (*ListAddrsMsg, error)
}

type serviceDiscoveryClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceDiscoveryClient(cc grpc.ClientConnInterface) ServiceDiscoveryClient {
	return &serviceDiscoveryClient{cc}
}

func (c *serviceDiscoveryClient) Register(ctx context.Context, in *NameAndAddressMsg, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ServiceDiscovery_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDiscoveryClient) Deregister(ctx context.Context, in *NameAndAddressMsg, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, ServiceDiscovery_Deregister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDiscoveryClient) FindService(ctx context.Context, in *ServiceNameMsg, opts ...grpc.CallOption) (*ServiceAddressMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceAddressMsg)
	err := c.cc.Invoke(ctx, ServiceDiscovery_FindService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDiscoveryClient) ListServices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListNamesMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListNamesMsg)
	err := c.cc.Invoke(ctx, ServiceDiscovery_ListServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceDiscoveryClient) ListAddrs(ctx context.Context, in *ServiceNameMsg, opts ...grpc.CallOption) (*ListAddrsMsg, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAddrsMsg)
	err := c.cc.Invoke(ctx, ServiceDiscovery_ListAddrs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceDiscoveryServer is the server API for ServiceDiscovery service.
// All implementations must embed UnimplementedServiceDiscoveryServer
// for forward compatibility.
type ServiceDiscoveryServer interface {
	Register(context.Context, *NameAndAddressMsg) (*Empty, error)
	Deregister(context.Context, *NameAndAddressMsg) (*Empty, error)
	FindService(context.Context, *ServiceNameMsg) (*ServiceAddressMsg, error)
	ListServices(context.Context, *Empty) (*ListNamesMsg, error)
	ListAddrs(context.Context, *ServiceNameMsg) (*ListAddrsMsg, error)
	mustEmbedUnimplementedServiceDiscoveryServer()
}

// UnimplementedServiceDiscoveryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceDiscoveryServer struct{}

func (UnimplementedServiceDiscoveryServer) Register(context.Context, *NameAndAddressMsg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedServiceDiscoveryServer) Deregister(context.Context, *NameAndAddressMsg) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deregister not implemented")
}
func (UnimplementedServiceDiscoveryServer) FindService(context.Context, *ServiceNameMsg) (*ServiceAddressMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindService not implemented")
}
func (UnimplementedServiceDiscoveryServer) ListServices(context.Context, *Empty) (*ListNamesMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListServices not implemented")
}
func (UnimplementedServiceDiscoveryServer) ListAddrs(context.Context, *ServiceNameMsg) (*ListAddrsMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAddrs not implemented")
}
func (UnimplementedServiceDiscoveryServer) mustEmbedUnimplementedServiceDiscoveryServer() {}
func (UnimplementedServiceDiscoveryServer) testEmbeddedByValue()                          {}

// UnsafeServiceDiscoveryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceDiscoveryServer will
// result in compilation errors.
type UnsafeServiceDiscoveryServer interface {
	mustEmbedUnimplementedServiceDiscoveryServer()
}

func RegisterServiceDiscoveryServer(s grpc.ServiceRegistrar, srv ServiceDiscoveryServer) {
	// If the following call pancis, it indicates UnimplementedServiceDiscoveryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceDiscovery_ServiceDesc, srv)
}

func _ServiceDiscovery_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameAndAddressMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceDiscovery_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryServer).Register(ctx, req.(*NameAndAddressMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDiscovery_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NameAndAddressMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceDiscovery_Deregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryServer).Deregister(ctx, req.(*NameAndAddressMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDiscovery_FindService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceNameMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryServer).FindService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceDiscovery_FindService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryServer).FindService(ctx, req.(*ServiceNameMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDiscovery_ListServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryServer).ListServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceDiscovery_ListServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryServer).ListServices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceDiscovery_ListAddrs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceNameMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceDiscoveryServer).ListAddrs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceDiscovery_ListAddrs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceDiscoveryServer).ListAddrs(ctx, req.(*ServiceNameMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceDiscovery_ServiceDesc is the grpc.ServiceDesc for ServiceDiscovery service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceDiscovery_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service_discovery.ServiceDiscovery",
	HandlerType: (*ServiceDiscoveryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _ServiceDiscovery_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _ServiceDiscovery_Deregister_Handler,
		},
		{
			MethodName: "FindService",
			Handler:    _ServiceDiscovery_FindService_Handler,
		},
		{
			MethodName: "ListServices",
			Handler:    _ServiceDiscovery_ListServices_Handler,
		},
		{
			MethodName: "ListAddrs",
			Handler:    _ServiceDiscovery_ListAddrs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pb/discovery.proto",
}
